{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_driver\" id=\"?ys?10Y*AFPE}rtm_/2N\" x=\"790\" y=\"130\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"Z}Bt1hw3aX_#qR|SsJmt\"><field name=\"MOTOR\">Arm</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"/$r}?fQN6yx/4Vzdik9.\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_control_forever\" id=\"GN*[WEyaG]9oL3iq?4Xp\"><statement name=\"SUBSTACK\"><block type=\"v5_control_if_then\" id=\"MA:5U1nX`,c}L35u~2ZO\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"[:y)J%hMp3vwNC#LQnmf\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL1</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_drivetrain_set_drive_velocity\" id=\"_RRDg^t6xicMt~$!H6Y)\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"/WImHL#i~m*NJj1~yFp)\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"y$`C{G.3e@=Z=H76|`Zl\"><field name=\"MOTOR\">LeftMotor</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"HJ|v$|Mq8IF.2P==!*p7\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"v.Om}PkWIc,ft!f_vQBx\"><field name=\"MOTOR\">RightMotor</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"f-ivy=$${=wnIt|y+4S3\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></statement><next><block type=\"v5_control_if_then\" id=\"z6Ic[)U5%7G0LA1_hur)\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"PwpEPv{MYB3`et#W}y.F\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonY</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_set_motor_stopping\" id=\"+j2|QI(*TyU4yC:cgb8)\"><field name=\"MOTOR\">Arm</field><field name=\"MODE\">hold</field></block></statement><next><block type=\"v5_control_if_then\" id=\"t2,0;eo@P:f{+ooC-P`A\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"H@0toU/r)tL7jy2HGQNs\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonA</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_set_motor_stopping\" id=\"E[d!P{GeGDRidC}r+6Y/\"><field name=\"MOTOR\">Arm</field><field name=\"MODE\">coast</field></block></statement></block></next></block></next></block></statement></block></next></block></next></block><block type=\"v5_events_when_autonomous\" id=\"9{j^$(mP*K0_)m;0T5D7\" x=\"250\" y=\"190\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"HSK9+vw=v=/t,W|2aE@(\"><field name=\"MOTOR\">Arm</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Ud(WBuAt6*{K}@;Ufv`K\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"zfIAmKaD2-innYCELFa(\"><field name=\"MOTOR\">Arm</field><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"VKg:ai;f+AKRnH^wp.9:\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"-tUu?ngQ0:({~Z-SjjMY\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"yKJ6g[:0rj!+sd2]iZ]n\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"R_xv0x0_tkv2?]+i8*+5\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"2h6*;Cyc!{o^Jc+v`K*O\"><field name=\"NUM\">70</field></shadow></value><next><block type=\"v5_motion_spin_for\" id=\"bZFcHZ)c=9W9cb(qc!H2\"><field name=\"MOTOR\">Arm</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"^Sj#|^oQ@PP+6CnAV,FX\"><field name=\"NUM\">90</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"F~ZABROJm,ww8U.Fv7.1\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">mm</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"MA|`eL#u0MeWpjlZZ/u{\"><field name=\"NUM\">60</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"LeftMotor","leftDir":"false","right":"RightMotor","rightDir":"false","upDown":"","upDownDir":"false","xB":"Arm","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[1,2,4,5,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180","id":"partner"},"triportSourcePort":null},{"port":[6],"name":"LeftMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[7],"name":"RightMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"Arm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor leftMotorA = motor(PORT1, ratio18_1, false);\nmotor leftMotorB = motor(PORT2, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT4, ratio18_1, true);\nmotor rightMotorB = motor(PORT5, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\nmotor LeftMotor = motor(PORT6, ratio18_1, false);\n\nmotor RightMotor = motor(PORT7, ratio18_1, true);\n\nmotor Arm = motor(PORT8, ratio18_1, false);\n\n\n\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool Controller1XBButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control LeftMotor\n      if (Controller1.ButtonL1.pressing()) {\n        LeftMotor.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        LeftMotor.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        LeftMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control RightMotor\n      if (Controller1.ButtonR1.pressing()) {\n        RightMotor.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        RightMotor.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        RightMotor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonX/ButtonB status to control Arm\n      if (Controller1.ButtonX.pressing()) {\n        Arm.spin(forward);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonB.pressing()) {\n        Arm.spin(reverse);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (!Controller1XBButtonsControlMotorsStopped) {\n        Arm.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat myVariable;\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  Arm.setVelocity(100.0, percent);\n  while (true) {\n    if (Controller1.ButtonL1.pressing()) {\n      Drivetrain.setDriveVelocity(100.0, percent);\n      LeftMotor.setVelocity(100.0, percent);\n      RightMotor.setVelocity(100.0, percent);\n    }\n    if (Controller1.ButtonY.pressing()) {\n      Arm.setStopping(hold);\n    }\n    if (Controller1.ButtonA.pressing()) {\n      Arm.setStopping(coast);\n    }\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Arm.setVelocity(100.0, percent);\n  Arm.spinFor(forward, 90.0, degrees, true);\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.driveFor(forward, 70.0, inches, true);\n  Arm.spinFor(reverse, 90.0, degrees, true);\n  Drivetrain.driveFor(reverse, 60.0, mm, true);\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n}","target":"Physical"}